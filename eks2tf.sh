usage()
{ echo "Usage: $0 -a <Account ID> [-g <Resource Group>] [-r <resource_type>] [-x <yes|no(default)>] [-p <yes|no(default)>] [-f <yes|no(default)>] " 1>&2; exit 1;
}
x="no"
p="no"
f="no"
v="no"
#while getopts ":s:g:r:x:p:f:" o; do
while getopts ":r:x:f:v:" o; do
    case "${o}" in
    #    a)
    #        s=${OPTARG}
    #    ;;
    #    g)
    #        g=${OPTARG}
    #    ;;
        r)
            r=${OPTARG}
        ;;
        x)
            x="yes"
        ;;
        p)
            p="yes"
        ;;
        f)
            f="yes"
        ;;
        v)
            v="yes"
        ;;
        
        *)
            usage
        ;;
    esac
done
shift $((OPTIND-1))

#if [ -z "${s}" ]; then
#    usage
#fi



export aws2tfmess="#Â File generated by aws2tf see https://github.com/andyt530/aws2tf"

#if [ "$s" != "" ]; then
#    mysub=$s
#else
#    echo -n "Enter id of Account [$mysub] > "
#    read response
#    if [ -n "$response" ]; then
#        mysub=$response
#    fi
#fi



mysub=`aws sts get-caller-identity | jq .Account | tr -d '"'`

if [ "$mysub" == "null" ]; then
    echo "Account is null exiting"
    exit
fi
rm -rf generated/tf.$mysub
mkdir -p generated/tf.$mysub

s=`echo $mysub`
cd generated/tf.$mysub
rm -rf .terraform
if [ "$f" = "no" ]; then
    rm -f import.log resources*.txt
    rm -f processed.txt
    rm -f *.tf
    rm -f terraform.*
    rm -rf .terraform
else
    sort -u processed.txt > pt.txt
    cp pt.txt processed.txt
fi
#if [ "$f" = "no" ]; then
#    ../../scripts/resources.sh 2>&1 | tee -a import.log
#fi
echo " "
echo "Account ID = ${s}"
echo "AWS Resource Group Filter = ${g}"
echo "Terraform Resource Type Filter = ${r}"
echo "Get Account Policies & Roles = ${p}"
echo "Extract KMS Secrets to .tf files (insecure) = ${x}"
echo "Fast Forward = ${f}"
echo " "


# cleanup from any previous runs
rm -f terraform*.backup
#rm -f terraform.tfstate
rm -f tf*.sh
cp ../../stub/*.tf .
echo "terraform init"
terraform init 2>&1 | tee -a import.log


# subscription level stuff - roles & policies
if [ "$p" = "yes" ]; then
    for j in `seq 51 54`; do
        docomm="../../scripts/${res[$j]}.sh $mysub"
        #echo $docomm
        #eval $docomm 2>&1 | tee -a import.log
        if grep -q Error: import.log ; then
            echo "Error in log file exiting ...."
            
        fi
    done
fi


date
lc=0
echo "loop through providers"
pwd
for com in `ls ../../scripts/3*-get-*.sh | cut -d'/' -f4 | sort -g`; do    
        echo "$com"
        docomm="../../scripts/$com all"
        if [ "$f" = "no" ]; then
            eval $docomm 2>&1 | tee -a import.log
        else
            grep "$docomm" processed.txt
            if [ $? -eq 0 ]; then
                echo "skipping $docomm"
            else
                eval $docomm 2>&1 | tee -a import.log
            fi
        fi
        lc=`expr $lc + 1`

        file="import.log"
        while IFS= read -r line
        do
            if [[ "${line}" == *"Error:"* ]];then
          
                if [[ "${line}" == *"Duplicate"* ]];then
                    echo "Ignoring $line"
                else
                    echo "Found Error: $line exiting .... (pass for now)"
                    
                fi
            fi

        done <"$file"

        echo "$docomm" >> processed.txt
        
    
    rm -f terraform*.backup
done
date

#if [ "$x" = "yes" ]; then
#    echo "Attempting to extract secrets"
#    ../../scripts/350_key_vault_secret.sh
#fi

echo "---------------------------------------------------------------------------"
echo "aws2tf output files are in generated/tf.$mysub"
echo "---------------------------------------------------------------------------"

echo "Terraform fmt ..."
terraform fmt
echo "Terraform validate ..."
terraform validate .

if [ "$v" = "yes" ]; then
    exit
fi

echo "---------------------------------------------------------------------------"
echo "aws2tf output files are in generated/tf.$mysub"
echo "---------------------------------------------------------------------------"

echo "Terraform Plan ..."
terraform plan .

echo "---------------------------------------------------------------------------"
echo "aws2tf output files are in generated/tf.$mysub"
echo "---------------------------------------------------------------------------"